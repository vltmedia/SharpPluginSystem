name: Build, and Release

on:
  push:
    tags:
      - '*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution in Any CPU Configuration
        run: dotnet build --configuration Release --property Platform="Any CPU" || dotnet build --configuration Release

      - name: Publish Package
        run: dotnet pack --configuration Release --property Platform="Any CPU" --output ./artifacts || dotnet pack --configuration Release --output ./artifacts

      - name: Get previous tag
        id: previous_tag
        run: |
          # Fetch all tags and find the previous tag
          git fetch --tags
          previous_tag=$(git tag --sort=-creatordate | sed -n '2p')
          echo "Previous tag: $previous_tag"
          echo "previous_tag=$previous_tag" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          # Generate the changelog by comparing commits between the previous tag and the current tag
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, listing all commits."
            changelog=$(git log --pretty=format:"- %s")
          else
            echo "Generating changelog between $PREVIOUS_TAG and current tag."
            changelog=$(git log "$PREVIOUS_TAG"..HEAD --pretty=format:"- %s")
          fi
          echo "Changelog generated:"
          echo "$changelog"
          echo "changelog=$changelog" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ${{ env.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and Rename .nupkg to input.nupkg
        run: |
          # Find the first .nupkg file in the artifacts directory
          file=$(find ./artifacts -name "*.nupkg" | head -n 1)
          if [ -z "$file" ]; then
            echo "No .nupkg file found in the artifacts directory."
            exit 1
          else
            echo "Found .nupkg file: $file"
            mv "$file" ./artifacts/input.nupkg
            echo "Renamed $file to input.nupkg"
          fi
        shell: bash

      - name: Upload NuGet package to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './artifacts/input.nupkg'
          asset_name: SharpPluginSystem_${{ github.ref_name }}.nupkg
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push generated package to Nuget registry
        run: dotnet nuget push ./artifacts/input.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json
